// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// The generator block runs every time you run `prisma generate`.
// The prisma-client-js is the default generator that builds ts types based on the db models.
// You can find more about generators here: https://www.prisma.io/docs/concepts/components/prisma-schema/generators
generator client {
  provider = "prisma-client-js"
}

// The datasource block specifies the url to your DBMS.
// You only need to set the DATABASE_URL in your environment file.
// You can find more about datasources here: https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  username          String  @unique // Unique constraint
  name              String? @db.VarChar(35) // Limit display name to 35 characters
  email             String  @unique // Unique constraint
  password          String
  isPrivate         Boolean @default(false)
  profilePicture    String? @db.VarChar(255)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  posts     Post[]

  follows   Follow[]   @relation(name: "follows")
  followers Follow[]   @relation(name: "followers")

  reactions Reaction[]

  messagesSended   Message[]  @relation(name: "messagesSended")
  messagesReceived Message[]  @relation(name: "messagesReceived")
}

model Follow {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  followerId String @db.Uuid()
  followedId String @db.Uuid()

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  follower User @relation(name: "follows", fields: [followerId], references: [id], onDelete: Cascade) // One to many
  followed User @relation(name: "followers", fields: [followedId], references: [id], onDelete: Cascade) // One to many
}

model Post {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  authorId    String     @db.Uuid // Foreign Key
  content     String     @db.VarChar(240) // Limit the content to 240 characters
  images      String[]
  isComment   Boolean    @default(false)
  parentId    String?    @db.Uuid
  qtyLikes    Int        @default(0)
  qtyRetweets Int        @default(0)
  qtyComments Int        @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade) // One to many

  parent    Post?    @relation("ChildToParent", fields: [parentId], references: [id])
  
  comments  Post[]   @relation("ChildToParent")

  reactions Reaction[]
}

model Reaction {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  userId String       @db.Uuid
  postId String       @db.Uuid
  type   ReactionType

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

enum ReactionType {
  LIKE
  RETWEET
}

model Message {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  senderId   String @db.Uuid
  receiverId String @db.Uuid
  content    String

  createdAt DateTime @default(now())

  sender   User @relation(name: "messagesSended", fields: [senderId], references: [id], onDelete: Cascade) // One to many
  receiver User @relation(name: "messagesReceived", fields: [receiverId], references: [id], onDelete: Cascade) // One to many
}
